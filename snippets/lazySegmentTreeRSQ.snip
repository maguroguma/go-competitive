snippet     lazySegmentTreeRSQ
abbr        NewLazySegTreeRSQ(A []int) *LazySegTreeRSQ
options     head
  type LazySegTreeRSQ struct {
    n          int
    node, lazy []int // 値配列, 遅延配列
  }

  func NewLazySegTreeRSQ(A []int) *LazySegTreeRSQ {
    lst := new(LazySegTreeRSQ)

    // ノード数の調整
    sz := len(A)
    lst.n = 1
    for lst.n < sz {
      lst.n *= 2
    }
    lst.node, lst.lazy = make([]int, 2*lst.n-1), make([]int, 2*lst.n-1)

    // 値配列の葉ノードの初期化
    for i := 0; i < sz; i++ {
      lst.node[i+lst.n-1] = A[i]
    }
    // 値配列の中間ノードの初期化
    for i := lst.n - 2; i >= 0; i-- {
      lst.node[i] = lst.node[i*2+1] + lst.node[i*2+2]
    }

    return lst
  }

  // k番目のノードについて遅延評価を行う
  func (lst *LazySegTreeRSQ) eval(k, l, r int) {
    // 遅延配列が空でない場合、自ノードおよび子ノードへの値の伝搬が起こる
    if lst.lazy[k] != 0 {
      // 自ノードの値配列に値を伝搬させる
      lst.node[k] += lst.lazy[k]

      // 中間ノードなら子ノードの遅延配列に伝搬させる
      if r-l > 1 {
        lst.lazy[2*k+1] += lst.lazy[k] / 2
        lst.lazy[2*k+2] += lst.lazy[k] / 2
      }

      // 自ノードの遅延配列を空にする
      lst.lazy[k] = 0
    }
  }

  // 区間加算
  func (lst *LazySegTreeRSQ) add(a, b, x, k, l, r int) {
    if r < 0 {
      r = lst.n
    }

    // k番目のノードに対して遅延評価を行う
    lst.eval(k, l, r)

    // 範囲外なら何もしない
    if b <= l || r <= a {
      return
    }

    if a <= l && r <= b {
      // 完全に被覆しているならば、遅延配列に値を入れた後に評価
      lst.lazy[k] += (r - l) * x
      lst.eval(k, l, r)
    } else {
      // そうでないならば、子ノードの値を再帰的に計算して、
      // 計算済みの値をもらってくる
      lst.add(a, b, x, 2*k+1, l, (l+r)/2)
      lst.add(a, b, x, 2*k+2, (l+r)/2, r)
      lst.node[k] = lst.node[2*k+1] + lst.node[2*k+2]
    }
  }

  // 区間和の計算
  func (lst *LazySegTreeRSQ) getSum(a, b, k, l, r int) int {
    if r < 0 {
      r = lst.n
    }

    // 範囲外
    if b <= l || r <= a {
      return 0
    }

    // 関数が呼び出されたら評価
    lst.eval(k, l, r)

    if a <= l && r <= b {
      return lst.node[k]
    }

    vl := lst.getSum(a, b, 2*k+1, l, (l+r)/2)
    vr := lst.getSum(a, b, 2*k+2, (l+r)/2, r)

    return vl + vr
  }

  // public methods
  func (lst *LazySegTreeRSQ) Add(a, b, x int) {
    lst.add(a, b, x, 0, 0, -1)
  }
  func (lst *LazySegTreeRSQ) Sum(a, b int) int {
    return lst.getSum(a, b, 0, 0, -1)
  }
