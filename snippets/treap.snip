snippet     treap
abbr        func NewTreap() *Treap
options     head
  // Treap usage
  // tr := NewTreap()
  // tr.Insert(k)
  // node := tr.Find(k)
  // min := tr.FindMinimum()
  // max := tr.FindMaximum()
  // tr.Delete(k)
  // node := tr.MinGeq(x)
  // node := tr.MinGreater(x)
  // node := tr.MaxLeq(x)
  // node := tr.MaxLess(x)
  // fmt.Println(PrintIntsLine(tr.Inorder()...))
  // fmt.Println(PrintIntsLine(tr.Preorder()...))
  // tr.InsertBySettingPri(k, p)

  type Node struct {
    key, priority int
    right, left   *Node
  }

  type Treap struct {
    root *Node
  }

  /*************************************/
  // Public method
  /*************************************/

  // NewTreap returns a pointer of a Treap instance.
  func NewTreap() *Treap {
    tr := new(Treap)
    tr.root = nil
    return tr
  }

  // InsertBySettingPri method inserts a new node consisting of new key and priority.
  // A duplicate key is ignored and nothing happens.
  func (tr *Treap) InsertBySettingPri(key, priority int) {
    tr.root = tr.insert(tr.root, key, priority)
  }

  // for XorShift
  var _gtx, _gty, _gtz, _gtw = 123456789, 362436069, 521288629, 88675123

  // Insert method inserts a new node consisting o new key.
  // The priority is automatically set by random value.
  // A duplicate key is ignored and nothing happens.
  func (tr *Treap) Insert(key int) {
    // XorShiftによる乱数生成
    // 下記URLを参考
    // https://qiita.com/tubo28/items/f058582e457f6870a800#lower_bound-upper_bound
    randInt := func() int {
      tt := (_gtx ^ (_gtx << 11))
      _gtx = _gty
      _gty = _gtz
      _gtz = _gtw
      _gtw = (_gtw ^ (_gtw >> 19)) ^ (tt ^ (tt >> 8))
      return _gtw
    }

    tr.root = tr.insert(tr.root, key, randInt())
  }

  // Find returns a node that has an argument key value.
  // Find returns nil when there is no node that has an argument key value.
  func (tr *Treap) Find(k int) *Node {
    u := tr.root
    for u != nil && k != u.key {
      if k < u.key {
        u = u.left
      } else {
        u = u.right
      }
    }
    return u
  }

  // FindMinimum returns a node that has the minimum key in the treap.
  // FindMinimum returns nil when there is no nodes.
  func (tr *Treap) FindMinimum() *Node {
    u := tr.root
    for u != nil && u.left != nil {
      u = u.left
    }
    return u
  }

  // FindMaximum returns a node that has the maximum key in the treap.
  // FindMaximum returns nil when there is no nodes.
  func (tr *Treap) FindMaximum() *Node {
    u := tr.root
    for u != nil && u.right != nil {
      u = u.right
    }
    return u
  }

  // Delete method deletes a node that has an argument key value.
  // A duplicate key is ignored and nothing happens.
  func (tr *Treap) Delete(key int) {
    tr.root = tr.delete(tr.root, key)
  }

  // Inorder returns a slice consisting of treap nodes in order of INORDER.
  // The nodes are sorted by key values.
  func (tr *Treap) Inorder() []int {
    res := make([]int, 0, 200000+5)
    tr.inorder(tr.root, &res)
    return res
  }

  // Preorder returns a slice consisting of treap nodes in order of PREORDER.
  func (tr *Treap) Preorder() []int {
    res := make([]int, 0, 200000+5)
    tr.preorder(tr.root, &res)
    return res
  }

  // MinGeq returns a node that has MINIMUM KEY MEETING key >= x.
  // https://qiita.com/tubo28/items/f058582e457f6870a800#lower_bound-upper_bound
  func (tr *Treap) MinGeq(x int) *Node {
    return tr.biggerLowerBound(tr.root, x)
  }

  // MinGreater returns a node that has MINIMUM KEY MEETING key > x.
  // https://qiita.com/tubo28/items/f058582e457f6870a800#lower_bound-upper_bound
  func (tr *Treap) MinGreater(x int) *Node {
    return tr.biggerUpperBound(tr.root, x)
  }

  // MaxLeq returns a node that has MAXIMUM KEY MEETING key <= x.
  // for AGC005-B
  func (tr *Treap) MaxLeq(x int) *Node {
    return tr.smallerUpperBound(tr.root, x)
  }

  // MaxLess returns a node that has MAXIMUM KEY MEETING key < x.
  // for AGC005-B
  func (tr *Treap) MaxLess(x int) *Node {
    return tr.smallerLowerBound(tr.root, x)
  }

  /*************************************/
  // Private method
  /*************************************/

  func (tr *Treap) insert(t *Node, key, priority int) *Node {
    // 葉に到達したら新しい節点を生成して返す
    if t == nil {
      node := new(Node)
      node.key, node.priority = key, priority
      return node
    }

    // 重複したkeyは無視
    if key == t.key {
      return t
    }

    if key < t.key {
      // 左の子へ移動
      t.left = tr.insert(t.left, key, priority) // 左の子へのポインタを更新
      // 左の子の方が優先度が高い場合右回転
      if t.priority < t.left.priority {
        t = tr.rightRotate(t)
      }
    } else {
      // 右の子へ移動
      t.right = tr.insert(t.right, key, priority) // 右の子へのポインタを更新
      if t.priority < t.right.priority {
        // 右の子の方が優先度が高い場合左回転
        t = tr.leftRotate(t)
      }
    }

    return t
  }

  // 削除対象の節点を回転によって葉まで移動させた後に削除する
  func (tr *Treap) delete(t *Node, key int) *Node {
    if t == nil {
      return nil
    }

    // 削除対象を検索
    if key < t.key {
      t.left = tr.delete(t.left, key)
    } else if key > t.key {
      t.right = tr.delete(t.right, key)
    } else {
      // 削除対象を発見、葉ノードとなるように回転を繰り返す
      return tr._delete(t, key)
    }

    return t
  }

  // 削除対象の節点の場合
  func (tr *Treap) _delete(t *Node, key int) *Node {
    if t.left == nil && t.right == nil {
      // 葉の場合
      return nil
    } else if t.left == nil {
      // 右の子のみを持つ場合は左回転
      t = tr.leftRotate(t)
    } else if t.right == nil {
      // 左の子のみを持つ場合は右回転
      t = tr.rightRotate(t)
    } else {
      // 優先度が高い方を持ち上げる
      if t.left.priority > t.right.priority {
        t = tr.rightRotate(t)
      } else {
        t = tr.leftRotate(t)
      }
    }

    return tr.delete(t, key)
  }

  func (tr *Treap) rightRotate(t *Node) *Node {
    s := t.left
    t.left = s.right
    s.right = t
    return s
  }

  func (tr *Treap) leftRotate(t *Node) *Node {
    s := t.right
    t.right = s.left
    s.left = t
    return s
  }

  // rootからスタートする
  func (tr *Treap) biggerLowerBound(t *Node, x int) *Node {
    if t == nil {
      return nil
    } else if t.key >= x {
      // 探索キーxが現在のノードキー以下の場合、左を探索する
      node := tr.biggerLowerBound(t.left, x)
      if node != nil {
        return node
      } else {
        return t
      }
    } else {
      // 探索キーxが現在のノードキーより大きい場合、右を探索する
      return tr.biggerLowerBound(t.right, x)
    }
  }

  // rootからスタートする
  func (tr *Treap) biggerUpperBound(t *Node, x int) *Node {
    if t == nil {
      return nil
    } else if t.key > x {
      // 探索キーxが現在のノードキーより小さい場合、左を探索する
      node := tr.biggerUpperBound(t.left, x)
      if node != nil {
        return node
      } else {
        return t
      }
    } else {
      // 探索キーxが現在のノードキー以上の場合、右を探索する
      return tr.biggerUpperBound(t.right, x)
    }
  }

  // rootからスタートする
  func (tr *Treap) smallerUpperBound(t *Node, x int) *Node {
    if t == nil {
      return nil
    } else if t.key <= x {
      node := tr.smallerUpperBound(t.right, x)
      if node != nil {
        return node
      } else {
        return t
      }
    } else {
      return tr.smallerUpperBound(t.left, x)
    }
  }

  // rootからスタートする
  func (tr *Treap) smallerLowerBound(t *Node, x int) *Node {
    if t == nil {
      return nil
    } else if t.key < x {
      node := tr.smallerLowerBound(t.right, x)
      if node != nil {
        return node
      } else {
        return t
      }
    } else {
      return tr.smallerLowerBound(t.left, x)
    }
  }

  func (tr *Treap) inorder(u *Node, res *[]int) {
    if u == nil {
      return
    }
    tr.inorder(u.left, res)
    *res = append(*res, u.key)
    tr.inorder(u.right, res)
  }

  func (tr *Treap) preorder(u *Node, res *[]int) {
    if u == nil {
      return
    }
    *res = append(*res, u.key)
    tr.preorder(u.left, res)
    tr.preorder(u.right, res)
  }

snippet     treapMultiSetVer
abbr        func NewTreap() *Treap
options     head
  // Treap usage
  // tr := NewTreap() 				// constructor
  // tr.Insert(key) 					// insert one key node
  // cnt := tr.Count(key) 		// return a number of key nodes
  // node := tr.Find(key) 		// return a pointer
  // min := tr.FindMinimum() 	// return a pointer
  // max := tr.FindMaximum() 	// return a pointer
  // tr.Delete(key) 					// delete one key node
  // node := tr.MinGeq(x) 		// return a pointer
  // node := tr.MinGreater(x) // return a pointer
  // node := tr.MaxLeq(x) 		// return a pointer
  // node := tr.MaxLess(x) 		// return a pointer

  // fmt.Println(PrintIntsLine(tr.Inorder()...))
  // fmt.Println(PrintIntsLine(tr.Preorder()...))
  // tr.InsertBySettingPri(key, p)

  type Node struct {
    key, priority int
    right, left   *Node
  }

  type Treap struct {
    root *Node
    cnts map[int]int
  }

  /*************************************/
  // Public method
  /*************************************/

  // NewTreap returns a pointer of a Treap instance.
  func NewTreap() *Treap {
    tr := new(Treap)

    tr.root = nil
    tr.cnts = make(map[int]int)

    return tr
  }

  // Count method returns the number of the key.
  // If there hasn't been the key in the treap, this returns 0.
  func (tr *Treap) Count(key int) int {
    return tr.cnts[key]
  }

  // InsertBySettingPri method inserts a new node consisting of new key and priority.
  // A duplicate key is ignored and nothing happens.
  // func (tr *Treap) InsertBySettingPri(key, priority int) {
  // 	tr.root = tr.insert(tr.root, key, priority)
  // }

  // for XorShift
  var _gtx, _gty, _gtz, _gtw = 123456789, 362436069, 521288629, 88675123

  // Insert method inserts a new node consisting o new key.
  // The priority is automatically set by random value.
  // A duplicate key is ignored and nothing happens.
  func (tr *Treap) Insert(key int) {
    preCnt := tr.Count(key)
    tr.increase(key, 1)
    if preCnt > 0 {
      return
    }

    // XorShiftによる乱数生成
    // 下記URLを参考
    // https://qiita.com/tubo28/items/f058582e457f6870a800#lower_bound-upper_bound
    randInt := func() int {
      tt := (_gtx ^ (_gtx << 11))
      _gtx = _gty
      _gty = _gtz
      _gtz = _gtw
      _gtw = (_gtw ^ (_gtw >> 19)) ^ (tt ^ (tt >> 8))
      return _gtw
    }

    tr.root = tr.insert(tr.root, key, randInt())
  }

  // Find returns a node that has an argument key value.
  // Find returns nil when there is no node that has an argument key value.
  func (tr *Treap) Find(key int) *Node {
    cnt := tr.cnts[key]
    if cnt == 0 {
      return nil
    }

    u := tr.root
    for u != nil && key != u.key {
      if key < u.key {
        u = u.left
      } else {
        u = u.right
      }
    }
    return u
  }

  // FindMinimum returns a node that has the minimum key in the treap.
  // FindMinimum returns nil when there is no nodes.
  func (tr *Treap) FindMinimum() *Node {
    u := tr.root
    for u != nil && u.left != nil {
      u = u.left
    }
    return u
  }

  // FindMaximum returns a node that has the maximum key in the treap.
  // FindMaximum returns nil when there is no nodes.
  func (tr *Treap) FindMaximum() *Node {
    u := tr.root
    for u != nil && u.right != nil {
      u = u.right
    }
    return u
  }

  // Delete method deletes a node that has an argument key value.
  // A duplicate key is ignored and nothing happens.
  func (tr *Treap) Delete(key int) {
    tr.decrease(key, 1)
    curCnt := tr.Count(key)
    if curCnt > 0 {
      return
    }

    tr.root = tr.delete(tr.root, key)
  }

  // Inorder returns a slice consisting of treap nodes in order of INORDER.
  // The nodes are sorted by key values.
  func (tr *Treap) Inorder() []int {
    res := make([]int, 0, 200000+5)
    tr.inorder(tr.root, &res)
    return res
  }

  // Preorder returns a slice consisting of treap nodes in order of PREORDER.
  func (tr *Treap) Preorder() []int {
    res := make([]int, 0, 200000+5)
    tr.preorder(tr.root, &res)
    return res
  }

  // MinGeq returns a node that has MINIMUM KEY MEETING key >= x.
  // https://qiita.com/tubo28/items/f058582e457f6870a800#lower_bound-upper_bound
  func (tr *Treap) MinGeq(x int) *Node {
    return tr.biggerLowerBound(tr.root, x)
  }

  // MinGreater returns a node that has MINIMUM KEY MEETING key > x.
  // https://qiita.com/tubo28/items/f058582e457f6870a800#lower_bound-upper_bound
  func (tr *Treap) MinGreater(x int) *Node {
    return tr.biggerUpperBound(tr.root, x)
  }

  // MaxLeq returns a node that has MAXIMUM KEY MEETING key <= x.
  // for AGC005-B
  func (tr *Treap) MaxLeq(x int) *Node {
    return tr.smallerUpperBound(tr.root, x)
  }

  // MaxLess returns a node that has MAXIMUM KEY MEETING key < x.
  // for AGC005-B
  func (tr *Treap) MaxLess(x int) *Node {
    return tr.smallerLowerBound(tr.root, x)
  }

  /*************************************/
  // Private method
  /*************************************/

  func (tr *Treap) increase(key, num int) {
    tr.cnts[key] += num
  }

  func (tr *Treap) decrease(key, num int) {
    curCnt := tr.cnts[key]
    if curCnt-num < 0 {
      panic("too many elements is deleted!")
    }

    tr.cnts[key] -= num
  }

  func (tr *Treap) insert(t *Node, key, priority int) *Node {
    // 葉に到達したら新しい節点を生成して返す
    if t == nil {
      node := new(Node)
      node.key, node.priority = key, priority
      return node
    }

    // 重複したkeyは無視
    if key == t.key {
      return t
    }

    if key < t.key {
      // 左の子へ移動
      t.left = tr.insert(t.left, key, priority) // 左の子へのポインタを更新
      // 左の子の方が優先度が高い場合右回転
      if t.priority < t.left.priority {
        t = tr.rightRotate(t)
      }
    } else {
      // 右の子へ移動
      t.right = tr.insert(t.right, key, priority) // 右の子へのポインタを更新
      if t.priority < t.right.priority {
        // 右の子の方が優先度が高い場合左回転
        t = tr.leftRotate(t)
      }
    }

    return t
  }

  // 削除対象の節点を回転によって葉まで移動させた後に削除する
  func (tr *Treap) delete(t *Node, key int) *Node {
    if t == nil {
      return nil
    }

    // 削除対象を検索
    if key < t.key {
      t.left = tr.delete(t.left, key)
    } else if key > t.key {
      t.right = tr.delete(t.right, key)
    } else {
      // 削除対象を発見、葉ノードとなるように回転を繰り返す
      return tr._delete(t, key)
    }

    return t
  }

  // 削除対象の節点の場合
  func (tr *Treap) _delete(t *Node, key int) *Node {
    if t.left == nil && t.right == nil {
      // 葉の場合
      return nil
    } else if t.left == nil {
      // 右の子のみを持つ場合は左回転
      t = tr.leftRotate(t)
    } else if t.right == nil {
      // 左の子のみを持つ場合は右回転
      t = tr.rightRotate(t)
    } else {
      // 優先度が高い方を持ち上げる
      if t.left.priority > t.right.priority {
        t = tr.rightRotate(t)
      } else {
        t = tr.leftRotate(t)
      }
    }

    return tr.delete(t, key)
  }

  func (tr *Treap) rightRotate(t *Node) *Node {
    s := t.left
    t.left = s.right
    s.right = t
    return s
  }

  func (tr *Treap) leftRotate(t *Node) *Node {
    s := t.right
    t.right = s.left
    s.left = t
    return s
  }

  // rootからスタートする
  func (tr *Treap) biggerLowerBound(t *Node, x int) *Node {
    if t == nil {
      return nil
    } else if t.key >= x {
      // 探索キーxが現在のノードキー以下の場合、左を探索する
      node := tr.biggerLowerBound(t.left, x)
      if node != nil {
        return node
      } else {
        return t
      }
    } else {
      // 探索キーxが現在のノードキーより大きい場合、右を探索する
      return tr.biggerLowerBound(t.right, x)
    }
  }

  // rootからスタートする
  func (tr *Treap) biggerUpperBound(t *Node, x int) *Node {
    if t == nil {
      return nil
    } else if t.key > x {
      // 探索キーxが現在のノードキーより小さい場合、左を探索する
      node := tr.biggerUpperBound(t.left, x)
      if node != nil {
        return node
      } else {
        return t
      }
    } else {
      // 探索キーxが現在のノードキー以上の場合、右を探索する
      return tr.biggerUpperBound(t.right, x)
    }
  }

  // rootからスタートする
  func (tr *Treap) smallerUpperBound(t *Node, x int) *Node {
    if t == nil {
      return nil
    } else if t.key <= x {
      node := tr.smallerUpperBound(t.right, x)
      if node != nil {
        return node
      } else {
        return t
      }
    } else {
      return tr.smallerUpperBound(t.left, x)
    }
  }

  // rootからスタートする
  func (tr *Treap) smallerLowerBound(t *Node, x int) *Node {
    if t == nil {
      return nil
    } else if t.key < x {
      node := tr.smallerLowerBound(t.right, x)
      if node != nil {
        return node
      } else {
        return t
      }
    } else {
      return tr.smallerLowerBound(t.left, x)
    }
  }

  func (tr *Treap) inorder(u *Node, res *[]int) {
    if u == nil {
      return
    }
    tr.inorder(u.left, res)
    *res = append(*res, u.key)
    tr.inorder(u.right, res)
  }

  func (tr *Treap) preorder(u *Node, res *[]int) {
    if u == nil {
      return
    }
    *res = append(*res, u.key)
    tr.preorder(u.left, res)
    tr.preorder(u.right, res)
  }
