snippet     bitOperations
abbr        PopCount(num int) int
options     head
  // NthBit returns nth bit value of an argument.
  // n starts from 0.
  func NthBit(num ${1:int}, nth int) $1 {
    return num >> uint(nth) & 1
  }

  // OnBit returns the integer that has nth ON bit.
  // If an argument has nth ON bit, OnBit returns the argument.
  func OnBit(num $1, nth int) $1 {
    return num | (1 << uint(nth))
  }

  // OffBit returns the integer that has nth OFF bit.
  // If an argument has nth OFF bit, OffBit returns the argument.
  func OffBit(num $1, nth int) $1 {
    return num & ^(1 << uint(nth))
  }

  // PopCount returns the number of ON bit of an argument.
  func PopCount(num int, ub int) int {
    res := 0

    for i := 0; i < ub; i++ {
      if ((num >> uint(i)) & 1) == 1 {
        res++
      }
    }

    return res
  }

snippet     bitZentansaku
abbr        func BruteForceByBits(l int, fn func([]bool))
options     head
  // originated from ktateish@AtCoder
  // e.g.: https://atcoder.jp/contests/abc167/submissions/13042361

  // BruteForceByBits01(bitsNum, fn) calls fn with []int for each n-bit 0/1 pattern
  func BruteForceByBits01(bitsNum int, fn func(bits []int)) {
    // e.g.
    // BruteForceByBits01(10, func(b []int) { fmt.Println(b) }
    // -> [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    //    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    //    [0, 1, 0, 0, 0, 0, 0, 0, 0, 0]
    //    [1, 1, 0, 0, 0, 0, 0, 0, 0, 0]
    //    [0, 0, 1, 0, 0, 0, 0, 0, 0, 0]
    //    ...
    N := 1 << uint(bitsNum)
    a := make([]int, bitsNum)
    for i := 0; i < N; i++ {
      for j := 0; j < bitsNum; j++ {
        k := bitsNum - j - 1
        if i&(1<<uint(j)) == 0 {
          a[k] = 0
        } else {
          a[k] = 1
        }
      }
      fn(a)
    }
  }

  // BruteForceByBitsTF(bitsNum, fn) calls fn with []bool for each n-bit true/false pattern
  func BruteForceByBitsTF(bitsNum int, fn func(bitFlags []bool)) {
    // e.g.
    // BruteForceByBitsTF(10, func(b []bool) { fmt.Println(b) }
    // -> [false, false, false, false, false, false, false, false, false, false]
    //    [true, false, false, false, false, false, false, false, false, false]
    //    [false, true, false, false, false, false, false, false, false, false]
    //    ...
    N := 1 << uint(bitsNum)
    a := make([]bool, bitsNum)
    for i := 0; i < N; i++ {
      for j := 0; j < bitsNum; j++ {
        k := bitsNum - j - 1
        if i&(1<<uint(j)) == 0 {
          a[k] = false
        } else {
          a[k] = true
        }
      }
      fn(a)
    }
  }
