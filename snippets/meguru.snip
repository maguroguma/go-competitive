snippet     binarySearch
abbr        func BinarySearch(initOK, initNG int, isOK func(mid int) bool) (ok int)
options     head
  func BinarySearch(initOK, initNG ${1:int}, isOK func(mid $1) bool) (ok $1) {
    ng := initNG
    ok = initOK
    for int(math.Abs(float64(ok-ng))) > 1 {
      mid := (ok + ng) / 2
      if isOK(mid) {
        ok = mid
      } else {
        ng = mid
      }
    }

    return ok
  }

snippet     binarySearchFloat
abbr        for i := 0; i < 100; i++
options     head
  func BinarySearch(initOK, initNG float64, isOK func(mid float64) bool) (ok float64) {
    ng := initNG
    ok = initOK
    for i := 0; i < 100; i++ {
      mid := (ok + ng) / 2
      if isOK(mid) {
        ok = mid
      } else {
        ng = mid
      }
    }

    return ok
  }

snippet     isSquareAndCubeByBinarySearch
abbr        IsSquareNumber(n int) bool
options     head
  func IsSquareNumber(n int) bool {
    if n == 0 {
      return true
    }

    if n < 0 {
      panic("argument should be not negative number")
    }

    bs := func(initOK, initNG int, isOK func(mid int) bool) (ok int) {
      ng := initNG
      ok = initOK
      for int(math.Abs(float64(ok-ng))) > 1 {
        mid := (ok + ng) / 2
        if isOK(mid) {
          ok = mid
        } else {
          ng = mid
        }
      }

      return ok
    }

    ok := bs(1<<30, 0, func(m int) bool {
      return m*m >= n
    })

    return ok*ok == n
  }

  func IsCubeNumber(n int) bool {
    if n == 0 {
      return true
    }

    if n < 0 {
      panic("argument should be not negative number")
    }

    bs := func(initOK, initNG int, isOK func(mid int) bool) (ok int) {
      ng := initNG
      ok = initOK
      for int(math.Abs(float64(ok-ng))) > 1 {
        mid := (ok + ng) / 2
        if isOK(mid) {
          ok = mid
        } else {
          ng = mid
        }
      }

      return ok
    }

    ok := bs(1<<20, 0, func(m int) bool {
      return m*m*m >= n
    })

    return ok*ok*ok == n
  }
