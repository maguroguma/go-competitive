snippet     sieve
abbr        sieve(n int) (int, []int)
options     head
  // エラトステネスの篩: O(NloglogN)
  // n以下の素数の数と素数のスライスを返す
  func sieve(n int) (int, []int) {
    // var prime [2000000 + 5]int
    prime := []int{}
    var isPrime [2000000 + 5 + 1]bool

    p := 0
    for i := 0; i <= n; i++ {
      isPrime[i] = true
    }
    isPrime[0], isPrime[1] = false, false

    for i := 2; i <= n; i++ {
      // iがtrueで残っている場合は素数認定し、自分より大きい倍数を取り除いていく
      if isPrime[i] {
        // prime[p] = i
        prime = append(prime, i)
        p++

        // 倍数の除去
        for j := 2 * i; j <= n; j += i {
          isPrime[j] = false
        }
      }
    }

    return p, prime
  }

snippet     sieveOsa_kVersion
abbr        func NewOsa_kSieve(n int) *Osa_kSieve
options     head
  // originated from: https://qiita.com/rsk0315_h4x/items/ff3b542a4468679fb409
  type Osa_kSieve struct {
    n      int
    minp   []int
    errMsg string
  }

  // NewOsa_kSieve returns sieve for [0, n).
  func NewOsa_kSieve(n int) *Osa_kSieve {
    os := new(Osa_kSieve)
    os.n = n
    os.errMsg = fmt.Sprintf("This Osa_k accept less and equal than %d", os.n)

    // Initialize
    os.minp = make([]int, os.n)
    for i := 0; i < os.n; i++ {
      os.minp[i] = i
    }
    for i := 2; i*i < os.n; i++ {
      if os.minp[i] < i {
        continue
      }

      for j := i * i; j < os.n; j += i {
        if os.minp[j] == j {
          os.minp[j] = i
        }
      }
    }

    return os
  }

  // Factors returns prime factors consisting of a.
  func (os *Osa_kSieve) Factors(a int) []int {
    if a <= 1 || a >= os.n {
      panic(os.errMsg)
    }

    res := []int{}

    for a > 1 {
      res = append(res, os.minp[a])
      a /= os.minp[a]
    }

    return res
  }

  // IsPrime returns whether a is prime number or not.
  func (os *Osa_kSieve) IsPrime(a int) bool {
    return !(os.minp[a] < a)
  }
