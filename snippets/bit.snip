snippet     binaryIndexedTree
abbr        type BinaryIndexedTree struct
options     head
  type BinaryIndexedTree struct {
    bit []int
    n   int
  }

  // n is number of elements of original data
  func NewBIT(n int) *BinaryIndexedTree {
    newBit := new(BinaryIndexedTree)

    newBit.bit = make([]int, n+1)
    newBit.n = n

    return newBit
  }

  // Sum of [1, i](1-based)
  func (b *BinaryIndexedTree) Sum(i int) int {
    s := 0

    for i > 0 {
      s += b.bit[i]
      i -= i & (-i)
    }

    return s
  }

  // Add x to i(1-based)
  func (b *BinaryIndexedTree) Add(i, x int) {
    for i <= b.n {
      b.bit[i] += x
      i += i & (-i)
    }
  }

snippet     binaryIndexedTreeSimpleVersion
abbr        var bit [1000000 + 1]int
options     head
  // [1, n]
  var bit [1000000 + 1]int
  var n int
  var A []int

  func sum(i int) int {
    s := 0

    for i > 0 {
      s += bit[i]
      i -= i & (-i)
    }

    return s
  }

  func add(i, x int) {
    for i <= n {
      bit[i] += x
      i += i & (-i)
    }
  }

