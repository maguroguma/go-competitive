snippet     lis
abbr        func LIS() int
options     head
  // LIS returns a length of Longest Increasing Subsequence of the argument slice A.
  // O( Nlog(N) )
  func LIS(A []int) int {
    // data structure
    const (
      INIT_VAL = 1 << 60
      MAX_N    = 200000 + 50
    )
    var dp = make([]int, MAX_N)

    // binary search sub function
    sub := func(a int) int {
      isOK := func(m, a int) bool {
        if dp[m] < a {
          return true
        }
        return false
      }
      ng, ok := len(dp), -1
      for int(math.Abs(float64(ok-ng))) > 1 {
        mid := (ok + ng) / 2
        if isOK(mid, a) {
          ok = mid
        } else {
          ng = mid
        }
      }
      bIdx := ok
      return bIdx
    }

    // main algorithm
    for i := 0; i < len(dp); i++ {
      dp[i] = INIT_VAL
    }
    for i := 0; i < len(A); i++ {
      idx := sub(A[i])
      dp[idx+1] = A[i]
    }
    return sub(INIT_VAL) + 1
  }
