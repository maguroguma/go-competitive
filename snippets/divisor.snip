snippet     trialDivision
abbr        TrialDivision(n int) map[int]int
options     head
  // TrialDivision returns the result of prime factorization of integer N.
  func TrialDivision(n int) map[int]int {
    if n <= 1 {
      panic(errors.New("[argument error]: TrialDivision only accepts a NATURAL number"))
    }

    p := map[int]int{}
    for i := 2; i*i <= n; i++ {
      exp := 0
      for n%i == 0 {
        exp++
        n /= i
      }

      if exp == 0 {
        continue
      }
      p[i] = exp
    }
    if n > 1 {
      p[n] = 1
    }

    return p
  }

snippet     divisorsMapVer
abbr        Divisors(n int) map[int]int
options     head
  // Divisors returns the divisors of an argument integer as map[int]int.
  func Divisors(n int) map[int]int {
    res := make(map[int]int)
    // res := map[int]int{}

    for l := 1; l*l <= n; l++ {
      if n%l == 0 {
        res[l] = 1
        res[n/l] = 1
      }
    }

    return res
  }

snippet     divisorsSliceVer
abbr        divisor(n int) []int
options     head
  // 約数の列挙: O(sqrt(n))
  func divisor(n int) []int {
    res := []int{}

    for i := 1; i*i <= n; i++ {
      if n%i == 0 {
        res = append(res, i)
        if i != (n / i) {
          res = append(res, (n / i))
        }
      }
    }

    return res
  }

snippet     isPrime
abbr        IsPrime(n int) bool
options     head
  // IsPrime judges whether an argument integer is a prime number or not.
  func IsPrime(n int) bool {
    if n == 1 {
      return false
    }

    for i := 2; i*i <= n; i++ {
      if n%i == 0 {
        return false
      }
    }

    return true
  }

