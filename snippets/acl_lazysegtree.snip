snippet     lazySegtreeACLVersion
abbr        func NewLazySegtree(v []S, e E, merger Merger, mapper Mapper, composer Composer, id Id) *LazySegtree
options     head
  // originated from: https://qiita.com/EmptyBox_0/items/2f8e3cf7bd44e0f789d5#lazysegtree
  // docs: https://atcoder.github.io/ac-library/production/document_ja/lazysegtree.html

  // type of monoid
  type S struct {
    val int
  }

  // type of mapping
  type F struct {
    val int
  }

  type E func() S
  type Merger func(a, b S) S
  type Mapper func(f F, x S) S
  type Composer func(f, g F) F
  type Id func() F
  type Compare func(v S) bool

  func NewLazySegtree(
    v []S, e E, merger Merger, mapper Mapper, composer Composer, id Id,
  ) *LazySegtree {
    lseg := new(LazySegtree)
    lseg.n = len(v)
    lseg.log = lseg._ceilPow2(lseg.n)
    lseg.size = 1 << uint(lseg.log)
    lseg.d = make([]S, 2*lseg.size)
    lseg.e = e
    lseg.lz = make([]F, lseg.size)
    lseg.merger = merger
    lseg.mapper = mapper
    lseg.composer = composer
    lseg.id = id
    for i := range lseg.d {
      lseg.d[i] = lseg.e()
    }
    for i := range lseg.lz {
      lseg.lz[i] = lseg.id()
    }
    for i := 0; i < lseg.n; i++ {
      lseg.d[lseg.size+i] = v[i]
    }
    for i := lseg.size - 1; i >= 1; i-- {
      lseg._update(i)
    }
    return lseg
  }

  type LazySegtree struct {
    n        int
    size     int
    log      int
    d        []S
    lz       []F
    e        E
    merger   Merger
    mapper   Mapper
    composer Composer
    id       Id
  }

  // Set sets a[p] = x
  // Time complexity: O(logn)
  func (lseg *LazySegtree) Set(p int, x S) {
    p += lseg.size
    for i := lseg.log; i <= 1; i-- {
      lseg._push(p >> uint(i))
    }
    lseg.d[p] = x
    for i := 1; i <= lseg.log; i++ {
      lseg._update(p >> uint(i))
    }
  }

  // Get returns a[p]
  // Time complexity: O(logn)
  func (lseg *LazySegtree) Get(p int) S {
    p += lseg.size
    for i := lseg.log; i >= 1; i-- {
      lseg._push(p >> uint(i))
    }
    return lseg.d[p]
  }

  // Prod returns op(a[l:r]...)
  // Time complexity: O(logn)
  func (lseg *LazySegtree) Prod(l, r int) S {
    if l == r {
      return lseg.e()
    }
    l += lseg.size
    r += lseg.size
    for i := lseg.log; i >= 1; i-- {
      if (l>>uint(i))<<uint(i) != l {
        lseg._push(l >> uint(i))
      }
      if (r>>uint(i))<<uint(i) != r {
        lseg._push(r >> uint(i))
      }
    }
    sml, smr := lseg.e(), lseg.e()
    for l < r {
      if (l & 1) == 1 {
        sml = lseg.merger(sml, lseg.d[l])
        l++
      }
      if (r & 1) == 1 {
        r--
        smr = lseg.merger(lseg.d[r], smr)
      }
      l >>= 1
      r >>= 1
    }
    return lseg.merger(sml, smr)
  }

  // AllProd returns op(a...)
  // Time complexity: O(1)
  func (lseg *LazySegtree) AllProd() S {
    return lseg.d[1]
  }

  // Apply sets a[p] = f(a[p])
  // Time complexity: O(logn)
  func (lseg *LazySegtree) Apply(p int, f F) {
    p += lseg.size
    for i := lseg.log; i >= 1; i-- {
      lseg._push(p >> uint(i))
    }
    lseg.d[p] = lseg.mapper(f, lseg.d[p])
    for i := 1; i <= lseg.log; i++ {
      lseg._update(p >> uint(i))
    }
  }

  // RangeApply sets a[i] = f(a[i]) (i in [l, r-1])
  // Time complexity: O(logn)
  func (lseg *LazySegtree) RangeApply(l int, r int, f F) {
    if l == r {
      return
    }
    l += lseg.size
    r += lseg.size
    for i := lseg.log; i >= 1; i-- {
      if (l>>uint(i))<<uint(i) != l {
        lseg._push(l >> uint(i))
      }
      if (r>>uint(i))<<uint(i) != r {
        lseg._push((r - 1) >> uint(i))
      }
    }
    l2, r2 := l, r
    for l < r {
      if l&1 == 1 {
        lseg._allApply(l, f)
        l++
      }
      if r&1 == 1 {
        r--
        lseg._allApply(r, f)
      }
      l >>= 1
      r >>= 1
    }
    l, r = l2, r2
    for i := 1; i <= lseg.log; i++ {
      if (l>>uint(i))<<uint(i) != l {
        lseg._update(l >> uint(i))
      }
      if (r>>uint(i))<<uint(i) != r {
        lseg._update((r - 1) >> uint(i))
      }
    }
  }

  // Time complexity: O(logn)
  func (lseg *LazySegtree) MaxRight(l int, cmp Compare) int {
    if l == lseg.n {
      return lseg.n
    }
    l += lseg.size
    for i := lseg.log; i >= 1; i-- {
      lseg._push(l >> uint(i))
    }
    sm := lseg.e()
    for {
      for l%2 == 0 {
        l >>= 1
      }
      if !cmp(lseg.merger(sm, lseg.d[l])) {
        for l < lseg.size {
          lseg._push(l)
          l = 2 * l
          if cmp(lseg.merger(sm, lseg.d[l])) {
            sm = lseg.merger(sm, lseg.d[l])
            l++
          }
        }
        return l - lseg.size
      }
      sm = lseg.merger(sm, lseg.d[l])
      l++
      if l&-l == l {
        break
      }
    }
    return lseg.n
  }

  // Time complexity: O(logn)
  func (lseg *LazySegtree) MinLeft(r int, cmp Compare) int {
    if r == 0 {
      return 0
    }
    r += lseg.size
    for i := lseg.log; i >= 1; i-- {
      lseg._push(r - 1>>uint(i))
    }
    sm := lseg.e()
    for {
      r--
      for r > 1 && r%2 != 0 {
        r >>= 1
      }
      if !cmp(lseg.merger(lseg.d[r], sm)) {
        for r < lseg.size {
          lseg._push(r)
          r = 2*r + 1
          if cmp(lseg.merger(lseg.d[r], sm)) {
            sm = lseg.merger(lseg.d[r], sm)
            r--
          }
        }
        return r + 1 - lseg.size
      }
      sm = lseg.merger(lseg.d[r], sm)
      if r&-r == r {
        break
      }
    }
    return 0
  }

  func (lseg *LazySegtree) _allApply(k int, f F) {
    lseg.d[k] = lseg.mapper(f, lseg.d[k])
    if k < lseg.size {
      lseg.lz[k] = lseg.composer(f, lseg.lz[k])
    }
  }

  func (lseg *LazySegtree) _update(k int) {
    lseg.d[k] = lseg.merger(lseg.d[2*k], lseg.d[2*k+1])
  }

  func (lseg *LazySegtree) _push(k int) {
    lseg._allApply(2*k, lseg.lz[k])
    lseg._allApply(2*k+1, lseg.lz[k])
    lseg.lz[k] = lseg.id()
  }

  func (lseg *LazySegtree) _ceilPow2(n int) int {
    x := 0
    for (1 << uint(x)) < n {
      x++
    }
    return x
  }
