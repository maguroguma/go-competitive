snippet     kiriage
abbr        (a + (b - 1)) / b
options     head
  (${1:#:bunshi} + (${2:#:bunbo} - 1)) / $2

snippet     kiriageFunc
abbr        func Kiriage(a, b int) int
options     head
  // Kiriage returns Ceil(a/b)
  // a >= 0, b > 0
  func Kiriage(a, b ${1:int}) $1 {
    return (a + (b - 1)) / b
  }


snippet     kiriageFloorAndCeil
abbr        func FloorFrac(a, b int) int
options     head
  // FloorFrac behaves like math.Floor when you want to use only integer type.
  // e.g. math.Floor(float64(a) / float64(b))
  func FloorFrac(a, b ${1:int}) $1 {
    _abs := func(d $1) $1 {
      if d < 0 {
        return -d
      }
      return d
    }

    if _abs(a)%_abs(b) == 0 {
      return a / b
    }

    if (a < 0 && b < 0) || (a > 0 && b > 0) {
      return a / b
    }
    return a/b - 1
  }

  // CeilFrac behaves like math.Ceil when you want to use only integer type.
  // e.g. math.Ceil(float64(a) / float64(b))
  func CeilFrac(a, b $1) $1 {
    _abs := func(d $1) $1 {
      if d < 0 {
        return -d
      }
      return d
    }

    if _abs(a)%_abs(b) == 0 {
      return a / b
    }

    if (a < 0 && b < 0) || (a > 0 && b > 0) {
      return a/b + 1
    }
    return a / b
  }
