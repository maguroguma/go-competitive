snippet     za-tsu
abbr        func ZaAtsu1Dim(org []int, initVal int) (pressed []int, orgToPress, pressToOrg map[int]int)
options     head
  // ZaAtsu1Dim returns 3 values.
  // pressed: pressed slice of the original slice
  // orgToPress: map for translating original value to pressed value
  // pressToOrg: reverse resolution of orgToPress
  // O(nlogn)
  func ZaAtsu1Dim(org []int, initVal int) (pressed []int, orgToPress, pressToOrg map[int]int) {
    pressed = make([]int, len(org))
    copy(pressed, org)
    sort.Sort(sort.IntSlice(pressed))

    orgToPress = make(map[int]int)
    for i := 0; i < len(org); i++ {
      if i == 0 {
        orgToPress[pressed[0]] = initVal
        continue
      }

      if pressed[i-1] != pressed[i] {
        initVal++
        orgToPress[pressed[i]] = initVal
      }
    }

    for i := 0; i < len(org); i++ {
      pressed[i] = orgToPress[org[i]]
    }

    pressToOrg = make(map[int]int)
    for k, v := range orgToPress {
      pressToOrg[v] = k
    }

    return
  }

snippet     zatsuLogN
abbr        func NewCompress() *Compress
options     head
  // NewCompress returns a compress algorithm.
  func NewCompress() *Compress {
    c := new(Compress)
    c.xs = []${1:int}{}
    c.cs = []$1{}

    return c
  }

  // Add can add any number of elements.
  // Time complexity: O(1)
  func (c *Compress) Add(X ...$1) {
    c.xs = append(c.xs, X...)
  }

  // Build compresses input elements by sorting.
  // Time complexity: O(NlogN)
  func (c *Compress) Build() {
    sort.Slice(c.xs, func(i, j int) bool {
      return c.xs[i] < c.xs[j]
    })

    if len(c.xs) == 0 {
      panic("Compress doesn't have any elements")
    }

    c.cs = append(c.cs, c.xs[0])
    for i := 1; i < len(c.xs); i++ {
      if c.xs[i-1] == c.xs[i] {
        continue
      }
      c.cs = append(c.cs, c.xs[i])
    }
  }

  // Get returns index that is equal to by binary search.
  // Time complexity: O(logN)
  func (c *Compress) Get(x $1) $1 {
    _abs := func(a $1) $1 {
      if a < 0 {
        return -a
      }
      return a
    }

    var ng, ok = $1(-1), $1(len(c.cs))
    for _abs(ok-ng) > 1 {
      mid := (ok + ng) / 2
      if c.cs[mid] >= x {
        ok = mid
      } else {
        ng = mid
      }
    }

    return ok
  }

  type Compress struct {
    xs []$1 // sorted original values
    cs []$1 // sorted compressed values
  }
