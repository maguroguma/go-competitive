snippet     convexHull
abbr        func ConvexHull(ps []Coord) []Coord
options     head
  // 二次元ベクトル構造体
  type Coord struct {
    x, y float64
  }

  // 凸包を求める
  func ConvexHull(ps []Coord) []Coord {
    sort.Slice(ps, func(i, j int) bool {
      if ps[i].x != ps[j].x {
        return ps[i].x < ps[j].x
      }
      return ps[i].y < ps[j].y
    })

    n := len(ps)

    k := 0                   // 凸包の頂点数
    qs := make([]Coord, 2*n) // 構築中の凸包

    // 下側凸包の作成
    for i := 0; i < n; i++ {
      for k > 1 {
        lp, rp := qs[k-1].minus(qs[k-2]), ps[i].minus(qs[k-1])

        if lp.det(rp) > 0.0 {
          break
        }
        k--
      }

      qs[k] = ps[i]
      k++
    }

    // 上側凸包の作成
    for i, t := n-2, k; i >= 0; i-- {
      for k > t {
        lp, rp := qs[k-1].minus(qs[k-2]), ps[i].minus(qs[k-1])

        if lp.det(rp) > 0.0 {
          break
        }
        k--
      }

      qs[k] = ps[i]
      k++
    }

    return qs[:k-1]
  }

  // ※座標範囲が小さく、凸包を構成する点の数が場合しか解けない
  // Time complexity: O(最大座標幅)
  func MaxDistEasy(ps []Coord) float64 {
    qs := ConvexHull(ps)
    res := 0.0
    for i := 0; i < len(qs); i++ {
      for j := 0; j < i; j++ {
        res = math.Max(res, dist(qs[i], qs[j]))
      }
    }
    return res
  }

  func MaxDistHard(ps []Coord) float64 {
    _cmp_x := func(p, q Coord) bool {
      if p.x != q.x {
        return p.x < q.x
      }
      return p.y < q.y
    }

    qs := ConvexHull(ps)

    n := len(qs)
    if n == 2 {
      // 凸包が潰れている場合は特別処理
      return dist(qs[0], qs[1])
    }

    i, j := 0, 0 // ある方向に最も遠い点対
    // x軸方向に最も遠い点対を求める
    for k := 0; k < n; k++ {
      if !_cmp_x(qs[i], qs[k]) {
        i = k
      }
      if _cmp_x(qs[j], qs[k]) {
        j = k
      }
    }

    res := 0.0
    si, sj := i, j
    for i != sj || j != si {
      // 方向を180度変化させる
      res = math.Max(res, dist(qs[i], qs[j]))

      // 辺i-(i+1)の法線方向と辺j-(j+1)の法線の方向のどちらを先に向くか判定
      im, jm := (i+1)%n, (j+1)%n

      lp, rp := qs[im], qs[i]
      left := lp.minus(rp)

      lp, rp = qs[jm], qs[j]
      right := lp.minus(rp)

      if left.det(right) < 0 {
        i = im // 辺i-(i+1)の法線方向を先に向く
      } else {
        j = jm // 辺j-(j+1)の法線方向を先に向く
      }
    }

    return res
  }

  func _add_eps(a, b float64) float64 {
    if math.Abs(a+b) < EPS*(math.Abs(a)+math.Abs(b)) {
      return 0
    }
    return a + b
  }

  // 内積
  func (p Coord) dot(q Coord) float64 {
    return _add_eps(p.x*q.x, p.y*q.y)
  }

  // 外積
  func (p Coord) det(q Coord) float64 {
    return _add_eps(p.x*q.y, -p.y*q.x)
  }

  // 距離の二乗
  func dist(p, q Coord) float64 {
    tx := _add_eps(p.x, -q.x)
    ty := _add_eps(p.y, -q.y)
    tp := Coord{tx, ty}

    return tp.dot(tp)
  }

  func (p Coord) minus(q Coord) Coord {
    x := _add_eps(p.x, -q.x)
    y := _add_eps(p.y, -q.y)
    return Coord{x, y}
  }
