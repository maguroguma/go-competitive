include snippets/*

# snippet     mapKeyIsExist
# abbr        if v, ok := map[]...
# options     head
#   if ${1:value}, ok := ${2:#:mapName}[${3:#:key}]; ok {
#     ${0:#:code-block}
#   }

# snippet     shakutoriMethod
# abbr        r := 0; for l := 0; l < n; l++ {...}
# options     head
#   r := 0
#   for l := 0; l < n; l++ {
#     for r < n && (${1:rightを1個前進させるにあたって条件を満たすかどうか}) {
#       ${2:sum += A[r]}
#       r++
#     }

#     ${3:ans += (r - l)}

#     if r == l {
#       r++
#     } else {
#       ${4:sum -= A[l]}
#     }
#   }

# snippet     sortAscIntegerSlice
# abbr        sort.Sort(sort.IntSlice(A))
# options     head
#   sort.Sort(sort.IntSlice(${1:A}))

# snippet     sortDescIntegerSlice
# abbr        sort.Sort(sort.Reverse(sort.IntSlice(A)))
# options     head
#   sort.Sort(sort.Reverse(sort.IntSlice(${1:A})))

# snippet     sortAscStringSlice
# abbr        sort.Sort(sort.StringSlice(S))
# options     head
#   sort.Sort(sort.StringSlice(${1:S}))

# snippet     sortDescStringSlice
# abbr        sort.Sort(sort.Reverse(sort.StringSlice(S)))
# options     head
#   sort.Sort(sort.Reverse(sort.StringSlice(${1:S})))

# snippet     copySlice
# abbr        B := copy(B, A)
# options     head
#   ${1:#:newSlice} := make([]${2:#:typeName(int)}, len(${3:#:originSlice}))
#   copy($1, $3)

# snippet     binaryIntegerString
# abbr        fmt.Sprintf("%b", ...)
# options     head
# 	${1:#:sa} := fmt.Sprintf("%b", ${2:#:a})

# snippet     enumGo
# abbr        type ENUM_NAME int
# options     head
#   type ${1:#:typeName} int,

#   const (
#     ${2:#:name1} $1 = iota,
#     ${3:#:name2},
#   )

# snippet     meguruBinarySearch
# abbr        ng, ok := -1, len(A)
# options     head
#   ng, ok := -1, len(${1:#:SliceName})
#   for int(math.Abs(float64(ok - ng))) > 1 {
#     mid := (ok + ng) / 2
#     if ${2:isOK}(mid) {
#       ok = mid
#     } else {
#       ng = mid
#     }
#   }
#   ${3:boundaryIdx} := ok

# snippet     cumulativeSum
# abbr        s[i+1] = s[i] + A[i]
# options     head
#   ${1:sums} := make([]int, len(${2:#:A})+1)
#   for i := 0; i < len($2); i++ {
#     $1[i+1] = $1[i] + $2[i]
#   }

# snippet     sortedStruct
# abbr        type Item struct
# options     head
#   type ${1:Item} struct {
#     key int
#     ${2:#:otherProperty and type}
#   }
#   type $1List []*$1

#   func (l $1List) Len() int {
#     return len(l)
#   }
#   func (l $1List) Swap(i, j int) {
#     l[i], l[j] = l[j], l[i]
#   }
#   func (l $1List) Less(i, j int) bool {
#     return l[i].key < l[j].key
#   }
#   // how to use
#   // L := make($1List, 0, 100000+1)
#   // L = append(L, &$1{key: intValue})
#   // sort.Sort(L)               // ASC
#   // sort.Sort(sort.Reverse(L)) // DESC

# snippet     pqInt
# abbr        type IntPQ []int
# options     head
#   type IntPQ []int

#   func (pq IntPQ) Len() int           { return len(pq) }
#   func (pq IntPQ) Less(i, j int) bool { return pq[i] ${1:<} pq[j] } // <: ASC, >: DESC
#   func (pq IntPQ) Swap(i, j int)      { pq[i], pq[j] = pq[j], pq[i] }
#   func (pq *IntPQ) Push(x interface{}) {
#     *pq = append(*pq, x.(int))
#   }
#   func (pq *IntPQ) Pop() interface{} {
#     old := *pq
#     n := len(old)
#     x := old[n-1]
#     *pq = old[0 : n-1]
#     return x
#   }

#   // how to use
#   // pq := &IntPQ{3, 6, 1, 2}
#   // heap.Init(pq)
#   // heap.Push(pq, intValue)
#   // poppedVal := heap.Pop(pq).(int)

# snippet     pqStruct
# abbr        type ItemPQ []*Item
# options     head
#   type ${1:Item} struct {
#     priority int
#     ${2:#:otherProperty and type}
#   }
#   type $1PQ []*$1

#   func (pq $1PQ) Len() int           { return len(pq) }
#   func (pq $1PQ) Less(i, j int) bool { return pq[i].priority ${2:<} pq[j].priority } // <: ASC, >: DESC
#   func (pq $1PQ) Swap(i, j int) {
#     pq[i], pq[j] = pq[j], pq[i]
#   }
#   func (pq *$1PQ) Push(x interface{}) {
#     item := x.(*$1)
#     *pq = append(*pq, item)
#   }
#   func (pq *$1PQ) Pop() interface{} {
#     old := *pq
#     n := len(old)
#     item := old[n-1]
#     *pq = old[0 : n-1]
#     return item
#   }

#   // how to use
#   // temp := make($1PQ, 0, 100000+1)
#   // pq := &temp
#   // heap.Init(pq)
#   // heap.Push(pq, &$1{priority: intValue})
#   // popped := heap.Pop(pq).(*$1)

# snippet     splitString
# abbr        strings.Split("aaa,bbb,ccc", ",")
# options     head
#   ${1:strSlice} := strings.Split("aaa,bbb,ccc", ",")

# snippet     permutationPatterns
# abbr        PermutationPatterns(elems []rune, k int) [][]rune
# options     head
#   // PermutationPatterns returns all patterns of nPk of elems([]${1:rune}).
#   func PermutationPatterns(elems []$1, k int) [][]$1 {
#     newResi := make([]$1, len(elems))
#     copy(newResi, elems)

#     return permRec([]$1{}, newResi, k)
#   }

#   // DFS function for PermutationPatterns.
#   func permRec(pattern, residual []$1, k int) [][]$1 {
#     if len(pattern) == k {
#       return [][]$1{pattern}
#     }

#     res := [][]$1{}
#     for i, e := range residual {
#       newPattern := make([]$1, len(pattern))
#       copy(newPattern, pattern)
#       newPattern = append(newPattern, e)

#       newResi := []$1{}
#       newResi = append(newResi, residual[:i]...)
#       newResi = append(newResi, residual[i+1:]...)

#       res = append(res, permRec(newPattern, newResi, k)...)
#     }

#     return res
#   }

# snippet     combinationPatterns
# abbr        CombinationPatterns(elems []rune, k int) [][]rune
# options     head
#   // CombinationPatterns returns all patterns of nCk of elems([]${1:rune}).
#   func CombinationPatterns(elems []$1, k int) [][]$1 {
#     newResi := make([]$1, len(elems))
#     copy(newResi, elems)

#     return combRec([]$1{}, newResi, k)
#   }

#   // DFS function for CombinationPatterns.
#   func combRec(pattern, residual []$1, k int) [][]$1 {
#     if len(pattern) == k {
#       return [][]$1{pattern}
#     }

#     res := [][]$1{}
#     for i, e := range residual {
#       newPattern := make([]$1, len(pattern))
#       copy(newPattern, pattern)
#       newPattern = append(newPattern, e)

#       newResi := []$1{}
#       newResi = append(newResi, residual[i+1:]...)

#       res = append(res, combRec(newPattern, newResi, k)...)
#     }

#     return res
#   }

# snippet     duplicatePatterns
# abbr        DuplicatePatterns(elems []rune, k int) [][]rune
# options     head
#   // DuplicatePatterns returns all patterns of n^k of elems([]${1:rune}).
#   func DuplicatePatterns(elems []$1, k int) [][]$1 {
#     return dupliRec([]$1{}, elems, k)
#   }

#   // DFS function for DuplicatePatterns.
#   func dupliRec(pattern, elems []$1, k int) [][]$1 {
#     if len(pattern) == k {
#       return [][]$1{pattern}
#     }

#     res := [][]$1{}
#     for _, e := range elems {
#       newPattern := make([]$1, len(pattern))
#       copy(newPattern, pattern)
#       newPattern = append(newPattern, e)

#       res = append(res, dupliRec(newPattern, elems, k)...)
#     }

#     return res
#   }

# snippet     factorialPatterns
# abbr        FactorialPatterns(elems []rune) [][]rune
# options     head
#   // FactorialPatterns returns all patterns of n! of elems([]${1:rune}).
#   func FactorialPatterns(elems []$1) [][]$1 {
#     newResi := make([]$1, len(elems))
#     copy(newResi, elems)

#     return factRec([]$1{}, newResi)
#   }

#   // DFS function for FactorialPatterns.
#   func factRec(pattern, residual []$1) [][]$1 {
#     if len(residual) == 0 {
#       return [][]$1{pattern}
#     }

#     res := [][]$1{}
#     for i, e := range residual {
#       newPattern := make([]$1, len(pattern))
#       copy(newPattern, pattern)
#       newPattern = append(newPattern, e)

#       newResi := []$1{}
#       newResi = append(newResi, residual[:i]...)
#       newResi = append(newResi, residual[i+1:]...)

#       res = append(res, factRec(newPattern, newResi)...)
#     }

#     return res
#   }

# snippet     imosMethod
# abbr        s, t := S[i], T[i]
# options     head
#   ${1:memo} := make([]int, ${2:1000000+5})  // 十分な定義域分の区間を取る
#   for i := 0; i < len(${3:S}); i++ {
#     // すべての起点・終点をマークする
#     memo[$3[i]]++
#     memo[${4:T}[i]]--
#   }
#   for i := 1; i < $2; i++ {
#     // 十分な定義域分の区間について更新を行う
#     memo[i] += memo[i-1]
#   }

# snippet     unionFind
# abbr        type UnionFind struct
# options     head
#   // UnionFind provides disjoint set algorithm.
#   // It accepts both 0-based and 1-based setting.
#   type UnionFind struct {
#     parents []int
#   }

#   // NewUnionFind returns a pointer of a new instance of UnionFind.
#   func NewUnionFind(n int) *UnionFind {
#     uf := new(UnionFind)
#     uf.parents = make([]int, n+1)

#     for i := 0; i <= n; i++ {
#       uf.parents[i] = -1
#     }

#     return uf
#   }

#   // Root method returns root node of an argument node.
#   // Root method is a recursive function.
#   func (uf *UnionFind) Root(x int) int {
#     if uf.parents[x] < 0 {
#       return x
#     }

#     // route compression
#     uf.parents[x] = uf.Root(uf.parents[x])
#     return uf.parents[x]
#   }

#   // Unite method merges a set including x and a set including y.
#   func (uf *UnionFind) Unite(x, y int) bool {
#     xp := uf.Root(x)
#     yp := uf.Root(y)

#     if xp == yp {
#       return false
#     }

#     // merge: xp -> yp
#     // merge larger set to smaller set
#     if uf.CcSize(xp) > uf.CcSize(yp) {
#       xp, yp = yp, xp
#     }
#     // update set size
#     uf.parents[yp] += uf.parents[xp]
#     // finally, merge
#     uf.parents[xp] = yp

#     return true
#   }

#   // Same method returns whether x is in the set including y or not.
#   func (uf *UnionFind) Same(x, y int) bool {
#     return uf.Root(x) == uf.Root(y)
#   }

#   // CcSize method returns the size of a set including an argument node.
#   func (uf *UnionFind) CcSize(x int) int {
#     return -uf.parents[uf.Root(x)]
#   }

# snippet     trialDivision
# abbr        TrialDivision(n int) map[int]int
# options     head
#   // TrialDivision returns the result of prime factorization of integer N.
#   func TrialDivision(n int) map[int]int {
#     if n <= 1 {
#       panic(errors.New("[argument error]: TrialDivision only accepts a NATURAL number"))
#     }

#     p := map[int]int{}
#     for i := 2; i*i <= n; i++ {
#       exp := 0
#       for n%i == 0 {
#         exp++
#         n /= i
#       }

#       if exp == 0 {
#         continue
#       }
#       p[i] = exp
#     }
#     if n > 1 {
#       p[n] = 1
#     }

#     return p
#   }

# snippet     divisors
# abbr        Divisors(n int) map[int]int
# options     head
#   // Divisors returns the divisors of an argument integer as map[int]int.
#   func Divisors(n int) map[int]int {
#     res := make(map[int]int)
#     // res := map[int]int{}

#     for l := 1; l*l <= n; l++ {
#       if n%l == 0 {
#         res[l] = 1
#         res[n/l] = 1
#       }
#     }

#     return res
#   }

# snippet     isPrime
# abbr        IsPrime(n int) bool
# options     head
#   // IsPrime judges whether an argument integer is a prime number or not.
#   func IsPrime(n int) bool {
#     if n == 1 {
#       return false
#     }

#     for i := 2; i*i <= n; i++ {
#       if n%i == 0 {
#         return false
#       }
#     }

#     return true
#   }

# snippet     negativeMod
# abbr        NegativeMod(val, m int) int
# options     head
#   // NegativeMod can calculate a right residual whether value is positive or negative.
#   func NegativeMod(val, m int) int {
#     res := val % m
#     if res < 0 {
#       res += m
#     }
#     return res
#   }

# snippet     modInv
# abbr        ModInv(a, m int) int
# options     head
#   // ModInv returns $a^{-1} mod m$ by Fermat's little theorem.
#   // O(1), but C is nearly equal to 30 (when m is 1000000000+7).
#   func ModInv(a, m int) int {
#     return modpow(a, m-2, m)
#   }

#   func modpow(a, e, m int) int {
#     if e == 0 {
#       return 1
#     }

#     if e%2 == 0 {
#       halfE := e / 2
#       half := modpow(a, halfE, m)
#       return half * half % m
#     }

#     return a * modpow(a, e-1, m) % m
#   }

# snippet     gridBFS
# abbr        steps := [4][2]int
# options     head
#   queue := [][2]int{}
#   steps := [4][2]int{
#     [2]int{0, 1}, [2]int{1, 0}, [2]int{0, -1}, [2]int{-1, 0},
#   }
#   for i := 0; i < ${1:h}; i++ {
#     for j := 0; j < ${2:w}; j++ {
#       if ${3:#:enqueue-condition} {
#         queue = append(queue, [2]int{i, j})
#       }
#     }
#   }

#   for len(queue) > 0 {
#     cc := queue[0]
#     queue = queue[1:]

#     cy, cx := cc[0], cc[1]
#     for _, step := range steps {
#       ny, nx := cy+step[0], cx+step[1]
#       if 0 <= ny && ny < $1 && 0 <= nx && nx < $2 && ${4:#:enqueue-condition} {
#         newCoord := [2]int{ny, nx}
#         queue = append(queue, newCoord)
#       }
#     }
#   }

# snippet     lcs
# abbr        func LCS(S, T []rune) []rune
# options     head
#   // LCS returns one of the Longest Common Subsequence of S and T.
#   // LCS only accepts len(S) and len(T) <= 5000.
#   func LCS(S, T []rune) []rune {
#     dp := [5001][5001]int{}

#     for i := 0; i < len(S); i++ {
#       for j := 0; j < len(T); j++ {
#         if S[i] == T[j] {
#           ChMax(&dp[i+1][j+1], dp[i][j]+1)
#         }
#         ChMax(&dp[i+1][j+1], dp[i+1][j])
#         ChMax(&dp[i+1][j+1], dp[i][j+1])
#       }
#     }

#     revRes := make([]rune, 0, dp[len(S)][len(T)])
#     si, ti := len(S), len(T)
#     for si > 0 && ti > 0 {
#       if dp[si][ti] == dp[si-1][ti] {
#         si--
#       } else if dp[si][ti] == dp[si][ti-1] {
#         ti--
#       } else {
#         revRes = append(revRes, S[si-1])
#         si--
#         ti--
#       }
#     }

#     res := make([]rune, len(revRes))
#     for i := len(revRes) - 1; i >= 0; i-- {
#       res[len(revRes)-1-i] = revRes[i]
#     }

#     return res
#   }

