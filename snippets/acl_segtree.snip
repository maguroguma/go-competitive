snippet     segtreeACLVersion
abbr        func NewSegtree(v []S, e E, m Merger) *Segtree
options     head
  // originated from: https://qiita.com/EmptyBox_0/items/2f8e3cf7bd44e0f789d5#segtree
  // docs: https://atcoder.github.io/ac-library/production/document_ja/segtree.html

  // type of monoid
  type S struct {
    val, idx int
  }

  type E func() S
  type Merger func(a, b S) S
  type Compare func(v S) bool

  func NewSegtree(v []S, e E, m Merger) *Segtree {
    seg := new(Segtree)
    seg.n = len(v)
    seg.log = seg._ceilPow2(seg.n)
    seg.size = 1 << uint(seg.log)
    seg.d = make([]S, 2*seg.size)
    seg.e = e
    seg.merger = m
    for i := range seg.d {
      seg.d[i] = seg.e()
    }
    for i := 0; i < seg.n; i++ {
      seg.d[seg.size+i] = v[i]
    }
    for i := seg.size - 1; i >= 1; i-- {
      seg._update(i)
    }
    return seg
  }

  type Segtree struct {
    n      int
    size   int
    log    int
    d      []S
    e      E
    merger Merger
  }

  // Set sets a[p] = x
  // Time complexity: O(logn)
  func (seg *Segtree) Set(p int, x S) {
    p += seg.size
    seg.d[p] = x
    for i := 1; i <= seg.log; i++ {
      seg._update(p >> uint(i))
    }
  }

  // Get returns a[p]
  // Time complexity: O(1)
  func (seg *Segtree) Get(p int) S {
    return seg.d[p+seg.size]
  }

  // Prod returns op(a[l:r]...)
  // Time complexity: O(logn)
  func (seg *Segtree) Prod(l, r int) S {
    sml, smr := seg.e(), seg.e()
    l += seg.size
    r += seg.size
    for l < r {
      if (l & 1) == 1 {
        sml = seg.merger(sml, seg.d[l])
        l++
      }
      if (r & 1) == 1 {
        r--
        smr = seg.merger(seg.d[r], smr)
      }
      l >>= 1
      r >>= 1
    }
    return seg.merger(sml, smr)
  }

  // AllProd returns op(a...)
  // Time complexity: O(1)
  func (seg *Segtree) AllProd() S {
    return seg.d[1]
  }

  // Time complexity: O(logn)
  func (seg *Segtree) MaxRight(l int, cmp Compare) int {
    if l == seg.n {
      return seg.n
    }
    l += seg.size
    sm := seg.e()
    for {
      for l%2 == 0 {
        l >>= 1
      }
      if !cmp(seg.merger(sm, seg.d[l])) {
        for l < seg.size {
          l = 2 * l
          if cmp(seg.merger(sm, seg.d[l])) {
            sm = seg.merger(sm, seg.d[l])
            l++
          }
        }
        return l - seg.size
      }
      sm = seg.merger(sm, seg.d[l])
      l++
      if l&-l == l {
        break
      }
    }
    return seg.n
  }

  // Time complexity: O(logn)
  func (seg *Segtree) MinLeft(r int, cmp Compare) int {
    if r == 0 {
      return 0
    }
    r += seg.size
    sm := seg.e()
    for {
      r--
      for r > 1 && r%2 != 0 {
        r >>= 1
      }
      if !cmp(seg.merger(seg.d[r], sm)) {
        for r < seg.size {
          r = 2*r + 1
          if cmp(seg.merger(seg.d[r], sm)) {
            sm = seg.merger(seg.d[r], sm)
            r--
          }
        }
        return r + 1 - seg.size
      }
      sm = seg.merger(seg.d[r], sm)
      if r&-r == r {
        break
      }
    }
    return 0
  }

  func (seg *Segtree) _update(k int) {
    seg.d[k] = seg.merger(seg.d[2*k], seg.d[2*k+1])
  }

  func (seg *Segtree) _ceilPow2(n int) int {
    x := 0
    for (1 << uint(x)) < n {
      x++
    }
    return x
  }
