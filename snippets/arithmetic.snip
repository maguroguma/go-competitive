snippet     digitSum
abbr        func DigitSum(n int) int
options     head
  // DigitSum returns digit sum of a decimal number.
  // DigitSum only accept a positive integer.
  func DigitSum(n int) int {
    if n < 0 {
      return -1
    }

    res := 0

    for n > 0 {
      res += n % 10
      n /= 10
    }

    return res
  }

snippet     digitNum
abbr        func DigitNumOfDecimal(n int) int
options     head
  // DigitNumOfDecimal returns digits number of n.
  // n is non negative number.
  func DigitNumOfDecimal(n int) int {
    res := 0

    for n > 0 {
      n /= 10
      res++
    }

    return res
  }


snippet     arithmeticSequenceSum
abbr        func ArithmeticSequenceSum(a, d, n int) int
options     head
  // ArithmeticSequenceSum returns a sum of an arithmetic sequence.
  // a: 初項, d: 公差, n: 項数
  func ArithmeticSequenceSum(a, d, n int) int {
    return (2*a + (n-1)*d) * n / 2
  }

snippet     geometricSequenceSum
abbr        func GeometricSequenceSum(a, r, n int) int
options     head
  // GeometricSequenceSum returns a sum of a geometric sequence.
  // a: 初項, r: 公比, n: 項数
  func GeometricSequenceSum(a, r, n int) int {
    nume := a * (1 - int(math.Pow(float64(r), float64(n))))
    deno := 1 - r
    return nume / deno
  }

