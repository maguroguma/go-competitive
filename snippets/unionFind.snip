snippet     unionFind
abbr        type UnionFind struct
options     head
  // UnionFind provides disjoint set algorithm.
  // It accepts both 0-based and 1-based setting.
  type UnionFind struct {
    parents []int
  }

  // NewUnionFind returns a pointer of a new instance of UnionFind.
  func NewUnionFind(n int) *UnionFind {
    uf := new(UnionFind)
    uf.parents = make([]int, n+1)

    for i := 0; i <= n; i++ {
      uf.parents[i] = -1
    }

    return uf
  }

  // Root method returns root node of an argument node.
  // Root method is a recursive function.
  func (uf *UnionFind) Root(x int) int {
    if uf.parents[x] < 0 {
      return x
    }

    // route compression
    uf.parents[x] = uf.Root(uf.parents[x])
    return uf.parents[x]
  }

  // Unite method merges a set including x and a set including y.
  func (uf *UnionFind) Unite(x, y int) bool {
    xp := uf.Root(x)
    yp := uf.Root(y)

    if xp == yp {
      return false
    }

    // merge: xp -> yp
    // merge larger set to smaller set
    if uf.CcSize(xp) > uf.CcSize(yp) {
      xp, yp = yp, xp
    }
    // update set size
    uf.parents[yp] += uf.parents[xp]
    // finally, merge
    uf.parents[xp] = yp

    return true
  }

  // Same method returns whether x is in the set including y or not.
  func (uf *UnionFind) Same(x, y int) bool {
    return uf.Root(x) == uf.Root(y)
  }

  // CcSize method returns the size of a set including an argument node.
  func (uf *UnionFind) CcSize(x int) int {
    return -uf.parents[uf.Root(x)]
  }

