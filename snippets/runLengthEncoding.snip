snippet     runLengthEncoding
abbr        func RunLengthEncoding(S []any) ([]any, []int)
options     head
  // RunLengthEncoding returns encoded slice of an input.
  func RunLengthEncoding(S []${1:rune}) ([]$1, []int) {
    runes := []$1{}
    lengths := []int{}

    l := 0
    for i := 0; i < len(S); i++ {
      // 1文字目の場合保持
      if i == 0 {
        l = 1
        continue
      }

      if S[i-1] == S[i] {
        // 直前の文字と一致していればインクリメント
        l++
      } else {
        // 不一致のタイミングで追加し、長さをリセットする
        runes = append(runes, S[i-1])
        lengths = append(lengths, l)
        l = 1
      }
    }
    runes = append(runes, S[len(S)-1])
    lengths = append(lengths, l)

    return runes, lengths
  }

  // RunLengthDecoding decodes RLE results.
  func RunLengthDecoding(S []$1, L []int) []$1 {
    if len(S) != len(L) {
      panic("S, L are not RunLengthEncoding results")
    }

    res := []$1{}

    for i := 0; i < len(S); i++ {
      for j := 0; j < L[i]; j++ {
        res = append(res, S[i])
      }
    }

    return res
  }
