snippet     segmentTreeRSQ
abbr        NewSegTreeRSQ(A []int)
options     head
  type SegTreeRSQ struct {
    num  int
    node [2*200005 - 1]int
  }

  func NewSegTreeRSQ(A []int) *SegTreeRSQ {
    st := new(SegTreeRSQ)

    st.num = 1
    for st.num < len(A) {
      st.num *= 2
    }

    for i := 0; i < len(A); i++ {
      st.node[i+(st.num-1)] = A[i]
    }
    for i := st.num - 2; i >= 0; i-- {
      st.node[i] = st.node[2*i+1] + st.node[2*i+2]
    }

    return st
  }

  func (st *SegTreeRSQ) Add(k, val int) {
    k += (st.num - 1)
    st.node[k] += val

    for k > 0 {
      k = (k - 1) / 2
      st.node[k] = st.node[2*k+1] + st.node[2*k+2]
    }
  }

  func (st *SegTreeRSQ) Query(a, b int) int {
    return st.subQuery(a, b, 0, 0, -1)
  }

  func (st *SegTreeRSQ) subQuery(a, b, k, l, r int) int {
    if r < 0 {
      r = st.num
    }

    if b <= l || r <= a {
      return 0
    }
    if a <= l && r <= b {
      return st.node[k]
    }

    vl := st.subQuery(a, b, 2*k+1, l, (l+r)/2)
    vr := st.subQuery(a, b, 2*k+2, (l+r)/2, r)
    return vl + vr
  }
