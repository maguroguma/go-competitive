snippet     lazySegmentTreeRMQ
abbr        NewLazySegTreeRMQ(A []int) *LazySegTreeRMQ
options     head
  type LazySegTreeRMQ struct {
    n, INF     int
    node, lazy []int
    lazyFlag   []bool
  }

  func NewLazySegTreeRMQ(A []int) *LazySegTreeRMQ {
    lst := new(LazySegTreeRMQ)
    lst.INF = 1 << 60

    sz := len(A)
    lst.n = 1
    for lst.n < sz {
      lst.n *= 2
    }

    lst.node, lst.lazy = make([]int, 2*lst.n-1), make([]int, 2*lst.n-1)
    lst.lazyFlag = make([]bool, 2*lst.n-1)
    for i := range lst.lazy {
      lst.lazy[i] = lst.INF
    }

    for i := 0; i < sz; i++ {
      lst.node[i+lst.n-1] = A[i]
    }
    for i := lst.n - 2; i >= 0; i-- {
      lst.node[i] = int(math.Min(float64(lst.node[i*2+1]), float64(lst.node[i*2+2])))
    }

    return lst
  }

  func (lst *LazySegTreeRMQ) eval(k, l, r int) {
    if lst.lazyFlag[k] {
      lst.node[k] = lst.lazy[k]
      if r-l > 1 {
        lst.lazy[2*k+1], lst.lazy[2*k+2] = lst.lazy[k], lst.lazy[k]
        lst.lazyFlag[2*k+1], lst.lazyFlag[2*k+2] = true, true
      }
      lst.lazyFlag[k] = false
    }
  }

  func (lst *LazySegTreeRMQ) update(a, b, x, k, l, r int) {
    if r < 0 {
      r = lst.n
    }

    lst.eval(k, l, r)

    if b <= l || r <= a {
      return
    }

    if a <= l && r <= b {
      lst.lazy[k], lst.lazyFlag[k] = x, true
      lst.eval(k, l, r)
    } else {
      lst.update(a, b, x, 2*k+1, l, (l+r)/2)
      lst.update(a, b, x, 2*k+2, (l+r)/2, r)
      lst.node[k] = int(math.Min(float64(lst.node[2*k+1]), float64(lst.node[2*k+2])))
    }
  }

  func (lst *LazySegTreeRMQ) find(a, b, k, l, r int) int {
    if r < 0 {
      r = lst.n
    }

    lst.eval(k, l, r)

    if b <= l || r <= a {
      return lst.INF
    }

    if a <= l && r <= b {
      return lst.node[k]
    }

    vl := lst.find(a, b, 2*k+1, l, (l+r)/2)
    vr := lst.find(a, b, 2*k+2, (l+r)/2, r)
    return int(math.Min(float64(vl), float64(vr)))
  }

  // public methods
  func (lst *LazySegTreeRMQ) Update(a, b, x int) {
    lst.update(a, b, x, 0, 0, -1)
  }
  func (lst *LazySegTreeRMQ) Find(a, b int) int {
    return lst.find(a, b, 0, 0, -1)
  }
