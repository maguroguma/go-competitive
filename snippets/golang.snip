snippet     mapKeyIsExist
abbr        if v, ok := map[]...
options     head
  if ${1:value}, ok := ${2:#:mapName}[${3:#:key}]; ok {
    ${0:#:code-block}
  }

snippet     copySlice
abbr        B := copy(B, A)
options     head
  ${1:#:newSlice} := make([]${2:#:typeName(int)}, len(${3:#:originSlice}))
  copy($1, $3)

snippet     binaryIntegerString
abbr        fmt.Sprintf("%b", ...)
options     head
	${1:#:sa} := fmt.Sprintf("%b", ${2:#:a})

snippet     enumGo
abbr        type ENUM_NAME int
options     head
  type ${1:#:typeName} int,

  const (
    ${2:#:name1} $1 = iota,
    ${3:#:name2},
  )

snippet     splitString
abbr        strings.Split("aaa,bbb,ccc", ",")
options     head
  ${1:strSlice} := strings.Split("aaa,bbb,ccc", ",")

snippet     reverseAnySlice
abbr        Reverse(A []Xxx) []Xxx
options     head
  func Reverse(A []${1:#:type}) []$1 {
    res := []$1{}

    n := len(A)
    for i := n - 1; i >= 0; i-- {
      res = append(res, A[i])
    }

    return res
  }

snippet     readFullLineAsString
abbr        var sc = bufio.NewScanner(os.Stdin)
options     head
  var sc = bufio.NewScanner(os.Stdin)
  if sc.Scan() {
    // 空行が読み込まれたら終了
    str = sc.Text()
  }

snippet     toggleLowerAndUpper
abbr        c - ('a' - 'A')
options     head
  if 'a' <= c && c <= 'z' {
    // toUpper
    // c-('a'-'A')
  } else if 'A' <= c && c <= 'Z' {
    // toLower
    // c+('a'-'A')
  } else {
    // stay
    // c
  }

snippet     deleteMapElement
abbr        delete(memo, "id")
options     head
  delete(${1:memo}, ${2:#:id})

snippet     pushNewElementToSlice
abbr        A = append(A, a)
options     head
  ${1:#:sliceName} = append($1, ${2:#:element})

snippet     reverseGenericsVersion
abbr        func ReverseMyself(slice interface{})
options     head
  func ReverseMyself(slice interface{}) {
    rv := reflect.ValueOf(slice)
    swap := reflect.Swapper(slice)
    length := rv.Len()
    for i, j := 0, length-1; i < j; i, j = i+1, j-1 {
      swap(i, j)
    }
  }

snippet     rotateMyself
abbr        func RotateMyself(slice interface{}, n int)
options     head
  func RotateMyself(slice interface{}, n int) {
    rv := reflect.ValueOf(slice)
    swap := reflect.Swapper(slice)
    length := rv.Len()
    if length == 0 || n == 0 {
      return
    }
    n = (length + n) % length
    for i, j := 0, n-1; i < j; i, j = i+1, j-1 {
      swap(i, j)
    }
    for i, j := n, length-1; i < j; i, j = i+1, j-1 {
      swap(i, j)
    }
    for i, j := 0, length-1; i < j; i, j = i+1, j-1 {
      swap(i, j)
    }
  }

snippet     shuffleMyself
abbr        func ShuffleMyself(slice interface{})
options     head
  func ShuffleMyself(slice interface{}) {
    rv := reflect.ValueOf(slice)
    swap := reflect.Swapper(slice)
    length := rv.Len()

    for i := 0; i < length; i++ {
      j := rand.Int()%(length-i) + i
      swap(i, j)
    }
  }
