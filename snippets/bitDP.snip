snippet     bitDP-n
abbr        dp[0] = 1
options     head
  dp[0] = 1   // 数え上げならこのような初期化

  // すべての「遷移前の」bit集合
  for S := 0; S < (1<<uint(n)); S++ {
    // すべての「最後に並べる対象」
    for j := 0; j < n; j++ {
      // 遷移前のbit集合に、最後に並べようとしている対象がまだ含まれていない場合のみ、
      // 遷移を考える
      if NthBit(S, j) == 0 {
        {{ dp[S | (1<<uint(j))] <- dp[S] }}
      }
    }
  }

snippet     bitDP-n2
abbr        dp[0][0] = 1
options     head
  dp[0][0] = 1   // 数え上げならこのような初期化

  // すべての「遷移前の」bit集合
  for S := 0; S < (1<<uint(n)); S++ {
    // すべての「最後に並べる対象」
    for j := 0; j < n; j++ {
      // すべての「遷移前のbit集合のうち、最後に並んだ対象」
      for k := 0; k < n; k++ {
        // 遷移前のbit集合に、j がまだ含まれていない場合かつ、
        // 遷移前のbit集合に、k がすでに含まれている場合のみ、
        // 遷移を考える
        if NthBit(S, j) == 0 && NthBit(S, k) == 1 {
          {{ dp[S | (1<<uint(j))][j] <- dp[S][k] }}
        }
      }
    }
  }
