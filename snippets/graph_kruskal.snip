snippet     kruskal
abbr        if !uf.Same(e.from, e.to)
options     head
  type Edge struct {
    from, to, cost int
  }

  func Kruskal(n int, L []Edge) int {
    sort.SliceStable(L, func(i, j int) bool { return L[i].cost < L[j].cost })

    // union find tree for judge whther there is cycle or not.
    uf := NewUnionFind(n)

    res := 0
    // check all edges in ASC order for these costs
    for _, e := range L {
      // add an edge when the both sides are not in the same component.
      if !uf.Same(e.from, e.to) {
        uf.Unite(e.from, e.to)
        res += e.cost
      }
    }

    return res
  }

  // UnionFind provides disjoint set algorithm.
  // It accepts both 0-based and 1-based setting.
  type UnionFind struct {
    parents []int
  }

  // NewUnionFind returns a pointer of a new instance of UnionFind.
  func NewUnionFind(n int) *UnionFind {
    uf := new(UnionFind)
    uf.parents = make([]int, n+1)

    for i := 0; i <= n; i++ {
      uf.parents[i] = -1
    }

    return uf
  }

  // Root method returns root node of an argument node.
  // Root method is a recursive function.
  func (uf *UnionFind) Root(x int) int {
    if uf.parents[x] < 0 {
      return x
    }

    // route compression
    uf.parents[x] = uf.Root(uf.parents[x])
    return uf.parents[x]
  }

  // Unite method merges a set including x and a set including y.
  func (uf *UnionFind) Unite(x, y int) bool {
    xp := uf.Root(x)
    yp := uf.Root(y)

    if xp == yp {
      return false
    }

    // merge: xp -> yp
    // merge larger set to smaller set
    if uf.CcSize(xp) > uf.CcSize(yp) {
      xp, yp = yp, xp
    }
    // update set size
    uf.parents[yp] += uf.parents[xp]
    // finally, merge
    uf.parents[xp] = yp

    return true
  }

  // Same method returns whether x is in the set including y or not.
  func (uf *UnionFind) Same(x, y int) bool {
    return uf.Root(x) == uf.Root(y)
  }

  // CcSize method returns the size of a set including an argument node.
  func (uf *UnionFind) CcSize(x int) int {
    return -uf.parents[uf.Root(x)]
  }

snippet     kruskalHowTo
abbr        how to implement kruskal
options     head
  // 1. ソート可能なエッジリストを構成する。
  //   - エッジ構造体は |from, to, cost| を最低限備えていれば良い。
  // 2. エッジリストをコストで昇順ソートする。
  // 3. 閉路判定用のUF木を確保する。
  //   - 確保するノード数は最大値を適当に超えさせておけば良い。
  // 4. エッジリストを先頭からチェックし |!uf.Same(e.from, e.to)| を満たすもののコストだけ答えに加算する。

