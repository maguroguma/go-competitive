snippet     prim
abbr        heap.Push(pq, &Node{pri: e.cost, cost: e.cost, id: e.to})
options     head
  // 隣接リストで辺を管理
  // ダイクストラ法に非常に似ている

  type Edge struct {
    to, cost int
  }

  const INF = 1 << 60

  var v int       // 頂点数
  var G [][]Edge  // 隣接リスト（グラフそのものを表すデータと言えるため、Gと命名）
  var used []bool // 頂点iがXに含まれているか（暫定の全域木Tに含まれているか）

  // O(|E| * log|V|)
  func prim() int {
    // 昇順で取り出せるpriority queue
    temp := make(NodePQ, 0, 100000+1)
    pq := &temp
    heap.Init(pq)

    // 初期化
    // 0から暫定の全域木Tを作っていく
    for _, e := range G[0] {
      heap.Push(pq, &Node{pri: e.cost, cost: e.cost, id: e.to})
    }
    used[0] = true

    res := 0
    for pq.Len() > 0 {
      node := heap.Pop(pq).(*Node)
      v := node.id

      // すでに全域木Tに組み込まれている場合は無視する
      if used[v] {
        continue
      }

      // ノードへ到達するための辺のコストを加算する
      res += node.cost
      used[v] = true

      for _, e := range G[v] {
        // vから伸びる先のノードがすでに全域木Tに組み込まれている場合は、その辺は無視する
        if used[e.to] {
          continue
        }
        heap.Push(pq, &Node{pri: e.cost, cost: e.cost, id: e.to})
      }
    }

    return res
  }

  type Node struct {
    pri      int
    cost, id int
  }
  type NodePQ []*Node

  func (pq NodePQ) Len() int           { return len(pq) }
  func (pq NodePQ) Less(i, j int) bool { return pq[i].pri < pq[j].pri } // <: ASC, >: DESC
  func (pq NodePQ) Swap(i, j int) {
    pq[i], pq[j] = pq[j], pq[i]
  }
  func (pq *NodePQ) Push(x interface{}) {
    item := x.(*Node)
    *pq = append(*pq, item)
  }
  func (pq *NodePQ) Pop() interface{} {
    old := *pq
    n := len(old)
    item := old[n-1]
    *pq = old[0 : n-1]
    return item
  }

  // how to use
  // temp := make(NodePQ, 0, 100000+1)
  // pq := &temp
  // heap.Init(pq)
  // heap.Push(pq, &Node{pri: intValue})
  // popped := heap.Pop(pq).(*Node)

snippet     primSquareOrderVer
abbr        func
options     head
  const (
    MAX   = 500 + 5
    INFTY = 1 << 30
    WHITE = 0
    GRAY  = 1
    BLACK = 2
  )

  var n int
  var M [MAX][MAX]int

  // O(|V|^2)
  func prim() int {
    var u, minv int
    var d, p, color [MAX]int

    for i := 0; i < n; i++ {
      d[i] = INFTY
      p[i] = -1
      color[i] = WHITE
    }

    d[0] = 0

    // すべてのノードがBLACKになるまで続くのでn回ループする
    for {
      // 次にTに加えるべきノードuを選定する
      minv = INFTY
      u = -1
      for i := 0; i < n; i++ {
        if minv > d[i] && color[i] != BLACK {
          u = i
          minv = d[i]
        }
      }
      if u == -1 {
        break // すべての頂点がTに属していたら終了
      }

      color[u] = BLACK // uをTに所属させる

      for v := 0; v < n; v++ {
        if color[v] != BLACK && M[u][v] != INFTY {
          if d[v] > M[u][v] {
            d[v] = M[u][v]
            p[v] = u
            color[v] = GRAY // ここをコメントアウトしてもACする
          }
        }
      }
    }

    sum := 0
    for i := 0; i < n; i++ {
      if p[i] != -1 {
        sum += M[i][p[i]]
      }
      // sum += d[i] // これでもACする
    }
    return sum
  }
